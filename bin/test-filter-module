#!/usr/bin/perl

#
# A tester for Courier::Filter modules.
#
# (C) 2003-2004 Julian Mehnle <julian@mehnle.net>
# $Id: test-filter-module,v 1.6 2004/10/02 17:23:04 julian Exp $
#
##############################################################################

use warnings;
#use diagnostics;
use strict;

use IO::Handle;

use Courier::Message;

# Declarations:
##############################################################################

use constant TRUE   => (0 == 0);
use constant FALSE  => not TRUE;

use constant MODULE_NAME_PREFIX => 'Courier::Filter::Module::';

# Implementation:
##############################################################################

if (@ARGV < 2 or $ARGV[0] =~ /^(?:-h|--help)$/) {
    my $script_name;
    ($script_name = $0) =~ s/^.*\///;
    STDERR->print(
        "Usage:\n" .
        "    $script_name MODULE [OPTION...] MESSAGE [+CONTROL...] [...]\n" .
        "\n" .
        "Applies the " . MODULE_NAME_PREFIX . "MODULE filter module to the specified\n" .
        "MESSAGE file and any CONTROL files (if specified).  Multiple MESSAGE files can\n" .
        "be specified, and each one may be followed by any number of CONTROL files, each\n" .
        "prefixed by a '+' character.\n" .
        "Optionally, OPTIONs in the format -<option>=<expr> can be given to the MODULE\n" .
        "constructor, where <expr> can be any valid perl expression.\n" .
        "\n" .
        "Example:\n" .
        "    $script_name \\\n" .
        "        DNSBL -zones='[qw(bl.foo.org bl.bar.org)]' \\\n" .
        "        test.rfc2822 +test.control\n" .
        "\n"
    );
    exit(64); # EX_USAGE
}

my $module_name = shift();

my %options;
$options{$1} = eval($2), shift()
    while $ARGV[0] =~ /^-(.*?)=(.*)/;

my @messages;

while (@ARGV) {
    my $file_name = shift();
    if ($file_name !~ /^\+/) {
        # Message file:
        my $message = Courier::Message->new(
            file_name => $file_name
        );
        push(@messages, $message);
    }
    else {
        # Control file, belonging to the previous message file:
        STDERR->print("Orphan control file specified.  List a message file first.\n"), exit(64) # EX_USAGE
            if not @messages;
        my $control_file_names = $messages[$#messages]->{control_file_names};
        push(@$control_file_names, $file_name);
    }
}

my $class = MODULE_NAME_PREFIX . $module_name;

eval("use $class;");
if ($@) {
    STDERR->print("Unable to load filter module $module_name ($class).\n");
    exit(1);
}

my $module = $class->new(
    %options,
    testing => TRUE # Enable testing mode, so no real-life/persistent things are done.
);

foreach my $message (@messages) {
    my ($result, $code) = $module->consider($message);
    $result ||= 'Ok';
    $code &&= "[$code]";
    $code ||= '';
    print($message->file_name . ": $result $code\n");
}
